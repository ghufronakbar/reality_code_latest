// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id   String @id @default(uuid())
  slug String @unique

  name        String
  headline    String
  description String @db.Text()

  thumbnailUrl String
  images       String[]
  demoVideoUrl String?

  license     String
  platforms   String[]
  tags        String[]
  keyFeatures String[]

  price         Float
  originalPrice Float

  productCategoryId     String
  category              ProductCategory        @relation(fields: [productCategoryId], references: [id], onDelete: Cascade)
  productSpesifications ProductSpesification[]
  productTools          ProductTool[]
  productReviews        ProductReview[]
  orderItems            OrderItem[]

  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)
  isBanned  Boolean @default(false)

  seller   Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProductCategory {
  id           String @id @default(uuid())
  name         String
  slug         String @unique
  description  String
  thumbnailUrl String

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProductSpesification {
  id    String @id @default(uuid())
  name  String
  value String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProductTool {
  id          String  @id @default(uuid())
  name        String
  value       String
  description String?

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProductReview {
  id         String  @id @default(uuid())
  rating     Int
  title      String
  comment    String?
  reviewerId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  reviewer User @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  password String?

  provider String?

  name              String?
  profilePictureUrl String?
  bio               String?

  role UserRole @default(User)

  roomChats RoomChat[]
  chats     Chat[]
  reviews   ProductReview[]

  seller Seller?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum UserRole {
  User
  Admin
}

model Seller {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String
  logo        String?
  description String?

  businessType    String
  businessAddress String
  phoneNumber     String
  website         String?

  banks     Bank[]
  documents Document[]
  products  Product[]
  orders    Order[]

  isActive   Boolean @default(true)
  isDeleted  Boolean @default(false)
  isBanned   Boolean @default(false)
  isVerified Boolean @default(false)
  // isFeatured  Boolean @default(false)
  // isPremium   Boolean @default(false)  

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Bank {
  id            String     @id @default(uuid())
  name          String
  accountNumber String
  bankCode      String
  holderName    String
  status        BankStatus @default(Pending)

  seller   Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum BankStatus {
  Verified
  Pending
  Deleted
}

model Document {
  id          String  @id @default(uuid())
  name        String
  type        String
  url         String
  description String?

  seller   Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Order {
  id            String      @id @default(uuid())
  orderNumber   String      @unique
  status        OrderStatus @default(Pending)
  totalAmount   Float
  paymentStatus String

  seller   Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId String

  items OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum OrderStatus {
  Pending
  Processing
  Completed
  Cancelled
  Refunded
}

model RoomChat {
  id   String @id @default(uuid())
  name String

  users User[]
  chats Chat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Chat {
  id      String   @id @default(uuid())
  content String   @db.Text()
  type    TypeChat @default(Text)

  senderId   String
  roomChatId String

  sender   User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  roomChat RoomChat @relation(fields: [roomChatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum TypeChat {
  Text
  Image
  Product
  AI
}
